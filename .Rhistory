reciprocity <- snafun::g_reciprocity(blogosphere_no_loops)
transitivity <- snafun::g_transitivity(blogosphere_no_loops)
density <- snafun::g_density(blogosphere_no_loops)
walk <- snafun::extract_comm_walktrap(blogosphere_no_loops)
igraph::modularity(walk)
length(walk)
igraph::communities(walk)
plot(walk, blogosphere_no_loops)
blogosphere_no_loops_no_iso <- snafun::remove_isolates(blogosphere_no_loops)
walk_no_iso <- snafun::extract_comm_walktrap(blogosphere_no_loops_no_iso)
igraph::modularity(walk_no_iso)
length(walk_no_iso)
igraph::communities(walk_no_iso)
plot(walk_no_iso, blogosphere_no_loops_no_iso, displaylabels=FALSE)
plot(walk, blogosphere_no_loops, vertex.label=NA)
plot(walk_no_iso, blogosphere_no_loops_no_iso, vertex.label=NA)
plot(walk_no_iso, blogosphere_no_loops_no_iso, vertex.label=NA, vertex.cex = 3)
plot(walk_no_iso, blogosphere_no_loops_no_iso, vertex.label=NA, vertex.cex = 1)
?snafun::plot
plot(walk_no_iso, blogosphere_no_loops_no_iso, vertex.label=NA, vertex.size = 3)
plot(walk_no_iso, blogosphere_no_loops_no_iso, vertex.label=NA, vertex.size = 10)
plot(walk_no_iso, blogosphere_no_loops_no_iso, vertex.label=NA, vertex.size = 10, edge.width = 1, edge.curved = TRUE)
snafun::make_mixingmatrix(blogosphere, "community")
blogosphere <- snafun::add_vertex_attributes(blogosphere, attr_name='community', value=igraph::membership(walk_no_iso))
data(blogosphere, package='SNA4DSData')
blogosphere_no_loops <- snafun::remove_loops(blogosphere)
print(blogosphere_no_loops)
summary <- snafun::g_summary(blogosphere_no_loops)
mean_distance <- snafun::g_mean_distance(blogosphere_no_loops)
diameter <- snafun::g_diameter(blogosphere_no_loops)
dyad_census <- snafun::count_dyads(blogosphere_no_loops)
reciprocity <- snafun::g_reciprocity(blogosphere_no_loops)
transitivity <- snafun::g_transitivity(blogosphere_no_loops)
density <- snafun::g_density(blogosphere_no_loops)
walk <- snafun::extract_comm_walktrap(blogosphere_no_loops)
igraph::modularity(walk)
length(walk)
igraph::communities(walk)
plot(walk, blogosphere_no_loops, vertex.label=NA)
blogosphere_no_loops_no_iso <- snafun::remove_isolates(blogosphere_no_loops)
walk_no_iso <- snafun::extract_comm_walktrap(blogosphere_no_loops_no_iso)
igraph::modularity(walk_no_iso)
length(walk_no_iso)
igraph::communities(walk_no_iso)
blogosphere <- blogosphere_no_loops_no_iso
print(blogosphere)
blogosphere <- snafun::add_vertex_attributes(blogosphere, attr_name='community', value=igraph::membership(walk_no_iso))
snafun::make_mixingmatrix(blogosphere, "community")
vertex_attributes <- snafun::extract_all_vertex_attributes(blogosphere)
table(vertex_attributes$community, vertex_attributes$party)
sna4tutti::open_sna4tutti_tutorials()
data(louis, package="SNA4DSData")
print(louis)
snafun::plot(louis)
snafun::plot(louis)
print(snafun::g_summary(louis))
adjecency_louis <- network::as.matrix.network(louis)
data(louis, package="SNA4DSData")
print(louis)
snafun::plot(louis)
print(snafun::g_summary(louis))
adjecency_louis <- network::as.matrix.network(louis)
View(adjecency_louis)
View(adjecency_louis)
diag(adjacency_louis) <- 0
w_adj <- adjacency_louis / rowSums(adjacency_louis)
View(adjecency_louis)
View(adjecency_louis)
w_adj <- adjacency_louis / rowSums(adjacency_louis)
adjacency_louis <- network::as.matrix.network(louis)
diag(adjacency_louis) <- 0
w_adj <- adjacency_louis / rowSums(adjacency_louis)
y_feature <- snafun::extract_vertex_attribute(louis, 'democratic')
y_feature <- snafun::extract_vertex_attribute(louis, c('democratic', 'perc_black'))
y_feature <- snafun::extract_vertex_attribute(louis, 'democratic')
y_feature <- attributes$democratic
attributes <- extract_all_vertex_attributes(louis)
attributes <- snafun::extract_all_vertex_attributes(louis)
y_feature <- attributes$democratic
x_features <- cbind(attributes$Intercept, attributes$perc_black, attributes$perc_cath, attributes$perc_urban, attributes$black_political_equality)
nam <- sna::lnam(y = y_feature, x = x_features, W1 = w_adj)
install(NumDeriv)
install.packages(numDeriv)
install.packages('numDeriv')
nam <- sna::lnam(y = y_feature, x = x_features, W1 = w_adj)
summary(nam)
x_features <- select(attributes, c('Intercept', 'perc_black', 'perc_urban', 'perc_cath', 'black_political_equality'))
x_features <- attributes[c('Intercept', 'perc_black', 'perc_urban', 'perc_cath', 'black_political_equality')]
nam <- sna::lnam(y = y_feature, x = x_features, W1 = w_adj)
x_features <- cbind(attributes$Intercept, attributes$perc_black, attributes$perc_cath, attributes$perc_urban, attributes$black_political_equality)
colnames(x_features) <- c('Intercept', 'perc_black', 'perc_cath', 'perc_urban', 'black_political_equality')
nam <- sna::lnam(y = y_feature, x = x_features, W1 = w_adj)
View(x_features)
View(x_features)
summary(nam)
strucequiv <- snafun::d_structural_equivalence(louis)
louis_igraph <- snafun::to_igraph(louis)
strucequiv <- snafun::d_structural_equivalence(louis_igraph)
strucequiv <- snafun::d_structural_equivalence(louis_igraph)
strucequiv <- snafun::d_structural_equivalence(louis)
data(fifa2016, package='SNA4DSData')
data(fifa2015, package='SNA4DSData')
data(fifa2006, package='SNA4DSData')
data(fifa2015, package='SNA4DSData')
data(fifa2006, package='SNA4DSData')
snafun::g_transitivity(fifa2015)
snafun::g_transitivity(fifa2006)
sna4tutti::open_sna4tutti_tutorials()
cug_2015_tran <- sna::cug.test(fifa2015, mode = "graph",
FUN = sna::gtrans,
cmode = "edges", reps = 2000,
FUN.args = list(mode = "graph"))
cug_2015_tran <- sna::cug.test(fifa2015, mode = "graph",
FUN = sna::gtrans,
cmode = "edges", reps = 200,
FUN.args = list(mode = "graph"))
cug_2015_tran
cug_2006_tran <- sna::cug.test(fifa2006, mode = "graph",
FUN = sna::gtrans,
cmode = "edges", reps = 200,
FUN.args = list(mode = "graph"))
cug_2006_tran
sna::plot.cug.test(cug_2015_tran)
hist(snafun::v_degree(fifa2015))
hist(snafun::v_degree(fifa2006))
cug_2015_tran2 <- sna::cug.test(fifa2015, mode = "graph",
FUN = sna::gtrans,
cmode = "dyad.census", reps = 200,
FUN.args = list(mode = "graph"))
cug_2015_tran2
cug_2006_tran2 <- sna::cug.test(fifa2006, mode = "graph",
FUN = sna::gtrans,
cmode = "dyad.census", reps = 200,
FUN.args = list(mode = "graph"))
cug_2006_tran2
cug_2015_centr_between <- sna::cug.test(fifa2015, mode = "graph",
FUN = snafun::g_centralize,
cmode = "edges", reps = 200,
FUN.args = list(mode = "graph"))
cug_2015_centr_between
cug_2006_centr_between <- sna::cug.test(fifa2006, mode = "graph",
FUN = snafun::g_centralize,
cmode = "edges", reps = 200,
FUN.args = list(mode = "graph"))
cug_2006_centr_between
cug_2015_centr_between2 <- sna::cug.test(fifa2015, mode = "graph",
FUN = snafun::g_centralize,
cmode = "dyad.census", reps = 200,
FUN.args = list(mode = "graph"))
type(fifa2015)
dtype(fifa2015)
typeof(fifa2015)
data(fifa2015, package='SNA4DSData')
data(fifa2006, package='SNA4DSData')
cug_2015_centr_between <- sna::cug.test(fifa2015, mode = "graph",
FUN = snafun::g_centralize,
cmode = "edges", reps = 200,
FUN.args = list(mode = "graph"))
data(fifa2015, package='SNA4DSData')
data(fifa2006, package='SNA4DSData')
snafun::g_transitivity(fifa2015)
snafun::g_transitivity(fifa2006)
cug_2015_tran <- sna::cug.test(fifa2015, mode = "graph",
FUN = sna::gtrans,
cmode = "edges", reps = 200,
FUN.args = list(mode = "graph"))
cug_2015_tran
cug_2006_tran <- sna::cug.test(fifa2006, mode = "graph",
FUN = sna::gtrans,
cmode = "edges", reps = 200,
FUN.args = list(mode = "graph"))
cug_2006_tran
hist(snafun::v_degree(fifa2015))
hist(snafun::v_degree(fifa2006))
cug_2015_tran2 <- sna::cug.test(fifa2015, mode = "graph",
FUN = sna::gtrans,
cmode = "dyad.census", reps = 200,
FUN.args = list(mode = "graph"))
cug_2015_tran2
cug_2006_tran2 <- sna::cug.test(fifa2006, mode = "graph",
FUN = sna::gtrans,
cmode = "dyad.census", reps = 200,
FUN.args = list(mode = "graph"))
cug_2006_tran2
cug_2015_centr_between <- sna::cug.test(fifa2015, mode = "graph",
FUN = snafun::g_centralize,
cmode = "edges", reps = 200,
FUN.args = list(mode = "graph"))
data(louis, package="SNA4DSData")
print(louis)
snafun::plot(louis)
print(snafun::g_summary(louis))
adjacency_louis <- network::as.matrix.network(louis)
diag(adjacency_louis) <- 0
w_adj <- adjacency_louis / rowSums(adjacency_louis)
attributes <- snafun::extract_all_vertex_attributes(louis)
y_feature <- attributes$democratic
x_features <- cbind(attributes$Intercept, attributes$perc_black, attributes$perc_cath, attributes$perc_urban, attributes$black_political_equality)
colnames(x_features) <- c('Intercept', 'perc_black', 'perc_cath', 'perc_urban', 'black_political_equality')
nam <- sna::lnam(y = y_feature, x = x_features, W1 = w_adj)
summary(nam)
strucequiv <- snafun::d_structural_equivalence(louis)
snafun::g_centralize(louis)
snafun::g_centralize(fifa2015)
cug_2006_centr_between2 <- sna::cug.test(fifa2006, mode = "graph",
FUN = snafun::g_centralize,
cmode = "dyad.census", reps = 200,
FUN.args = list(mode = "graph"))
data(louis, package="SNA4DSData")
print(louis)
snafun::plot(louis)
print(snafun::g_summary(louis))
adjacency_louis <- network::as.matrix.network(louis)
diag(adjacency_louis) <- 0
w_adj <- adjacency_louis / rowSums(adjacency_louis)
attributes <- snafun::extract_all_vertex_attributes(louis)
y_feature <- attributes$democratic
x_features <- cbind(attributes$Intercept, attributes$perc_black, attributes$perc_cath, attributes$perc_urban, attributes$black_political_equality)
colnames(x_features) <- c('Intercept', 'perc_black', 'perc_cath', 'perc_urban', 'black_political_equality')
nam <- sna::lnam(y = y_feature, x = x_features, W1 = w_adj)
summary(nam)
strucequiv <- snafun::d_structural_equivalence(louis)
data(fifa2015, package='SNA4DSData')
data(fifa2006, package='SNA4DSData')
snafun::g_centralize(fifa2015)
snafun::g_transitivity(fifa2015)
snafun::g_transitivity(fifa2006)
cug_2015_tran <- sna::cug.test(fifa2015, mode = "graph",
FUN = sna::gtrans,
cmode = "edges", reps = 200,
FUN.args = list(mode = "graph"))
cug_2015_tran
cug_2006_tran <- sna::cug.test(fifa2006, mode = "graph",
FUN = sna::gtrans,
cmode = "edges", reps = 200,
FUN.args = list(mode = "graph"))
cug_2006_tran
hist(snafun::v_degree(fifa2015))
hist(snafun::v_degree(fifa2006))
cug_2015_tran2 <- sna::cug.test(fifa2015, mode = "graph",
FUN = sna::gtrans,
cmode = "dyad.census", reps = 200,
FUN.args = list(mode = "graph"))
cug_2015_tran2
cug_2006_tran2 <- sna::cug.test(fifa2006, mode = "graph",
FUN = sna::gtrans,
cmode = "dyad.census", reps = 200,
FUN.args = list(mode = "graph"))
cug_2006_tran2
cug_2015_centr_between <- sna::cug.test(fifa2015, mode = "graph",
FUN = snafun::g_centralize,
cmode = "edges", reps = 200,
FUN.args = list(mode = "graph"))
install.packages("snafun")
install.packages("snafun")
remotes::install_github("snanalyst/snafun")
data(louis, package="SNA4DSData")
print(louis)
snafun::plot(louis)
print(snafun::g_summary(louis))
adjacency_louis <- network::as.matrix.network(louis)
diag(adjacency_louis) <- 0
w_adj <- adjacency_louis / rowSums(adjacency_louis)
attributes <- snafun::extract_all_vertex_attributes(louis)
y_feature <- attributes$democratic
x_features <- cbind(attributes$Intercept, attributes$perc_black, attributes$perc_cath, attributes$perc_urban, attributes$black_political_equality)
colnames(x_features) <- c('Intercept', 'perc_black', 'perc_cath', 'perc_urban', 'black_political_equality')
nam <- sna::lnam(y = y_feature, x = x_features, W1 = w_adj)
summary(nam)
strucequiv <- snafun::d_structural_equivalence(louis)
diag(strucequiv) <- 0
w_equiv <- strucequiv / rowSums(strucequiv)
nam2 <- sna::lnam(y = y_feature, x = x_features, W1 = w_equiv)
summary(nam2)
snafun::g_centralize(louis)
data(fifa2015, package='SNA4DSData')
data(fifa2006, package='SNA4DSData')
snafun::g_centralize(fifa2015)
snafun::g_transitivity(fifa2015)
snafun::g_transitivity(fifa2006)
cug_2015_tran <- sna::cug.test(fifa2015, mode = "graph",
FUN = sna::gtrans,
cmode = "edges", reps = 200,
FUN.args = list(mode = "graph"))
cug_2015_tran
cug_2006_tran <- sna::cug.test(fifa2006, mode = "graph",
FUN = sna::gtrans,
cmode = "edges", reps = 200,
FUN.args = list(mode = "graph"))
cug_2006_tran
hist(snafun::v_degree(fifa2015))
hist(snafun::v_degree(fifa2006))
cug_2015_tran2 <- sna::cug.test(fifa2015, mode = "graph",
FUN = sna::gtrans,
cmode = "dyad.census", reps = 200,
FUN.args = list(mode = "graph"))
cug_2015_tran2
cug_2006_tran2 <- sna::cug.test(fifa2006, mode = "graph",
FUN = sna::gtrans,
cmode = "dyad.census", reps = 200,
FUN.args = list(mode = "graph"))
cug_2006_tran2
cug_2015_centr_between <- sna::cug.test(fifa2015, mode = "graph",
FUN = snafun::g_centralize,
cmode = "edges", reps = 200,
FUN.args = list(mode = "graph"))
sna4tutti::open_sna4tutti_tutorials()
plot(nam)
plot(nam2)
data(louis, package = "SNA4DSData")
data(fifa2015, package = "SNA4DSData")
streq <- snafun::d_structural_equivalence(louis)
diag(streq) <- 0
W_equiv <-  streq / rowSums(streq)
attrs <- snafun::extract_all_vertex_attributes(louis)
mod_struc <- sna::lnam(y = attrs[, "democratic"],
x = as.matrix(attrs[, c("Intercept", "perc_black",
"perc_cath", "perc_urban",
"black_political_equality")]),
W1 = W_equiv)
plot(mod_struc)
str(mod_struc)
mod_struc$disturbances
mod_struc$disturbances > 20
(mod_struc$disturbances > 20) | (mod_struc$disturbances < 20)
(mod_struc$disturbances > 20) | (mod_struc$disturbances < -20)
(mod_struc$disturbances > 15) | (mod_struc$disturbances < -15)
str(louis)
snafun::has_vertexnames(louis)
outlier <- (mod_struc$disturbances > 15) | (mod_struc$disturbances < -15)
snafun::extract_vertex_names(louis)[outlier]
snafun::extract_vertex_names(louis)
print(louis)
snafun::plot(louis)
plot(mod_struc)
snafun::extract_vertex_names(louis)[outlier]
attributes
snafun::extract_vertex_names(louis)[outlier]
centralize_f <- function(x, directed = FALSE) {
x <- snafun::fix_cug_input(x, directed = directed)
snafun::g_centralize(x)
}
cug_2015_centr_between <- sna::cug.test(fifa2015, mode = "graph",
FUN = centralize_f,
cmode = "edges", reps = 200,
FUN.args = list(mode = "graph"))
cug_2015_centr_between <- sna::cug.test(fifa2015,
FUN = centralize_f,
cmode = "edges", reps = 200,
FUN.args = list(mode = "graph"))
cug_2015_centr_between <- sna::cug.test(fifa2015, mode = "graph",
FUN = centralize_f,
cmode = "edges", reps = 200)
cug_2006_centr_between <- sna::cug.test(fifa2006, mode = "graph",
FUN = centralize_f,
cmode = "edges", reps = 200)
trans_f <- function(x, directed = FALSE) {
x <- snafun::fix_cug_input(x, directed = directed)
snafun::g_transitivity(x)
}
sna::cug.test(fifa2015, mode = "graph", FUN = trans_f, cmode = "edges", reps = 200)
snafun::g_centralize(x)$centralization
centralize_f <- function(x, directed = FALSE) {
x <- snafun::fix_cug_input(x, directed = directed)
snafun::g_centralize(x)$centralization
}
cug_2015_centr_between <- sna::cug.test(fifa2015, mode = "graph",
FUN = centralize_f,
cmode = "edges", reps = 200)
cug_2015_centr_between
cug_2006_centr_between <- sna::cug.test(fifa2006, mode = "graph",
FUN = centralize_f,
cmode = "edges", reps = 200)
cug_2006_centr_between
cug_2015_centr_between2 <- sna::cug.test(fifa2015, mode = "graph",
FUN = centralize_f,
cmode = "dyad.census", reps = 200)
cug_2015_centr_between2
cug_2006_centr_between2 <- sna::cug.test(fifa2006, mode = "graph",
FUN = centralize_f,
cmode = "dyad.census", reps = 200)
cug_2006_centr_between2
#   ____________________________________________________________________________
#   Challenge 2                                                             ####
walktrap_f <- function(x, directed = FALSE) {
x <- snafun::fix_cug_input(x, directed = directed)
snafun::extract_comm_walktrap(x)
}
sna::cug.test(fifa2015, mode = "graph", FUN = walktrap_f, cmode = "edges", reps = 200)
walk <- snafun::extract_comm_walktrap(fifa2015)
str(walk)
sna4tutti::open_sna4tutti_tutorials()
#   ____________________________________________________________________________
#   Challenge 2                                                             ####
walktrap_f <- function(x, directed = FALSE) {
x <- snafun::fix_cug_input(x, directed = directed)
walk <- snafun::extract_comm_walktrap(x)
max(walk$membership)
}
sna::cug.test(fifa2015, mode = "graph", FUN = walktrap_f, cmode = "edges", reps = 200)
#   ____________________________________________________________________________
#   Challenge 2                                                             ####
walktrap_f <- function(x, directed = FALSE) {
x <- snafun::fix_cug_input(x, directed = directed)
snafun::extract_comm_walktrap(x) |> length()
}
sna::cug.test(fifa2015, mode = "graph", FUN = walktrap_f, cmode = "edges", reps = 200)
sna4tutti::open_sna4tutti_tutorials()
plot(UKfaculty,
edge.arrow.size = .2,
edge.width = igraph::E(UKfaculty)$weight,
vertex.label = igraph::V(UKfaculty)$Group,
vertex.color = igraph::V(UKfaculty)$Group,
layout = igraph::layout.fruchterman.reingold,
vertex.size=10)
data(UKfaculty, package = "igraphdata")
print(igraphdata::UKfaculty)
plot(UKfaculty,
edge.arrow.size = .2,
edge.width = igraph::E(UKfaculty)$weight,
vertex.label = igraph::V(UKfaculty)$Group,
vertex.color = igraph::V(UKfaculty)$Group,
layout = igraph::layout.fruchterman.reingold,
vertex.size=10)
plot(UKfaculty,
edge.arrow.size = .2,
edge.width = igraph::E(UKfaculty)$weight,
edge.color = 'purple',
vertex.label = igraph::V(UKfaculty)$Group,
vertex.label.color = 'white',
vertex.color = 'black',
vertex.shape = 'square',
layout = igraph::layout_on_grid,
vertex.size=10,
main="My plot")
plot(UKfaculty,
edge.arrow.size = .2,
edge.width = igraph::E(UKfaculty)$weight,
vertex.label = igraph::V(UKfaculty)$Group,
vertex.color = igraph::V(UKfaculty)$Group,
layout = igraph::tkplot,
vertex.size=10)
plot(UKfaculty,
edge.arrow.size = .2,
edge.width = igraph::E(UKfaculty)$weight,
edge.color = 'purple',
vertex.label = igraph::V(UKfaculty)$Group,
vertex.label.color = 'white',
vertex.color = 'black',
vertex.shape = 'banana',
layout = igraph::layout_on_grid,
vertex.size=10,
main="My plot")
plot(UKfaculty,
edge.arrow.size = .2,
edge.width = igraph::E(UKfaculty)$weight,
edge.color = 'purple',
vertex.label = igraph::V(UKfaculty)$Group,
vertex.label.color = 'white',
vertex.color = 'black',
vertex.shape = 'square',
layout = igraph::layout_on_grid,
vertex.size=10,
main="My plot")
twitter_data <- readxl::read_excel("twitter_data.xlsx")
setwd("~/University/Courses/JADS/Social Network Analysis for Data Scientists/5. Group Project/SNAPoliticalTwitter")
setwd("~/University/Courses/JADS/Social Network Analysis for Data Scientists/5. Group Project/SNAPoliticalTwitter")
twitter_data <- readxl::read_excel("twitter_data.xlsx")
table(twitter_data$hashtags)
table(twitter_data$mentions)
nodes <- unique(twitter_data$Politician_name)
mentions <- data.frame()
for (politician in nodes){
tweets <- twitter_data[twitter_data$Politician_name==politician,]
mentions_per_politician <- c()
for (row in 1:nrow(tweets)){
if (grepl(",", tweets[row, 'mentions'], fixed = TRUE)){
mentions_per_politician <- c(mentions_per_politician, unlist(strsplit(tweets[row, 'mentions'][[1]], ",")))
} else if (!gbutils::isNA(tweets[row, 'mentions'][[1]])){
mentions_per_politician <- append(mentions_per_politician, tweets[row, 'mentions'][[1]])
}
}
if (length(mentions_per_politician)==0){
next
}
mentions_per_politician <- sapply(mentions_per_politician, trimws)
mentions_per_politician <- sapply(mentions_per_politician, tolower)
mentions_processed <- c(politician, unique(mentions_per_politician))
length(mentions_processed) <- 20
mentions <- rbind(mentions, mentions_processed)
}
rownames(mentions) <- mentions[[1]]
mentions[[1]] <- NULL
View(mentions)
adjacency.matrix <- data.frame(matrix(ncol = 25, nrow = 25))
rownames(adjacency.matrix) <- rownames(mentions)
colnames(adjacency.matrix) <- rownames(mentions)
for (politician1 in rownames(mentions)){
for (politician2 in rownames(mentions)){
combined.mentions <- c(mentions[politician1,], mentions[politician2,])
combined.mentions <- combined.mentions[!is.na(combined.mentions)]
if (any(duplicated(combined.mentions))){
adjacency.matrix[politician1, politician2] = 1
} else {
adjacency.matrix[politician1, politician2] = 0
}
}
}
adjacency.matrix <- data.matrix(adjacency.matrix)
diag(adjacency.matrix) <- 0
hashtag.net <- snafun::to_igraph(adjacency.matrix, bipartite = FALSE, vertices = NULL)
plot(hashtag.net)
